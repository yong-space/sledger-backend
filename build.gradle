plugins {
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'io.freefair.lombok' version '8.6'
    id 'java'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

repositories { mavenCentral() }

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}

def testContainersVersion = '1.19.8'

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "com.resend:resend-java:3.2.0"
    implementation "org.bouncycastle:bcprov-jdk18on:1.78.1"
    implementation "com.auth0:java-jwt:4.4.0"
    implementation ("com.opencsv:opencsv:5.9") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation ("org.jxls:jxls-jexcel:1.0.9") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'log4j', module: 'log4j'
    }
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.2"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "org.testcontainers:mongodb:$testContainersVersion"
}

tasks.named("jar") {enabled = false }

tasks.withType(Test).configureEach { useJUnitPlatform() }
test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    reports {
        junitXml.required = false
        html.required = false
    }
    finalizedBy jacocoTestReport
    jacoco { excludes = [ 'tech.sledger.model.*' ] }
}
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'tech/sledger/*.class',
                'tech/sledger/model/**',
                'tech/sledger/service/ResendService.class'
            ])
        })
    }
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

bootBuildImage {
    pullPolicy = "IF_NOT_PRESENT"
    environment = [
        "BP_JVM_VERSION": "22",
        "BPE_DELIM_JAVA_TOOL_OPTIONS": " ",
        "BPE_APPEND_JAVA_TOOL_OPTIONS": " -XX:MaxDirectMemorySize=200M"
    ]
    docker {
        publishRegistry {
            username = "$System.env.DOCKER_USER"
            password = "$System.env.DOCKER_PASS"
        }
    }
}
